<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   	   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
	   	   
	 <context:component-scan
	 	base-package="me.zgs225.springinaction.springidol">
	 	<context:include-filter type="assignable"
	 		expression="me.zgs225.springinaction.springidol.Instrument" />
	 	<context:exclude-filter type="annotation" 
	 		expression="me.zgs225.springinaction.springidol.SkipIt"/>
	 </context:component-scan>
	   	   
	<!-- Wire beans through constructor -->
	<bean id="duke"
	      class="me.zgs225.springinaction.springidol.Juggler">
		<constructor-arg value="15" />
    </bean>
    
    <bean id="sonnet29"
          class="me.zgs225.springinaction.springidol.Sonnet29" />
          
    <bean id="poeticJuggler"
    	  class="me.zgs225.springinaction.springidol.PoeticJuggler">
    	<constructor-arg value="15" />
    	<constructor-arg value="#{ sonnet29 }" />
    </bean>
    
    <!-- Wire beans through factory method -->
    <bean id="theStage"
     	  class="me.zgs225.springinaction.springidol.Stage"
     	  factory-method="getInstance" />
     	  
    <!-- The scope property and its value 'prototype'  -->
    <!-- to force Spring to produce a new bean instance each time on is needed-->
    <bean id="ticket"
    	  class="me.zgs225.springinaction.springidol.Ticket" scope="prototype" />
    
    <bean id="auditorium"
          class="me.zgs225.springinaction.springidol.Auditorium"
          init-method="turnOnLights"
          destroy-method="turnOffLights" />
          
    <bean id="kenny"
          class="me.zgs225.springinaction.springidol.Instrumentalist" 
          p:song = "Jingle Bells"
          p:instrument-ref = "piano" />
    
    <bean id="saxophone"
    	  class="me.zgs225.springinaction.springidol.Saxophone" />
    	  
    <bean id="piano"
          class="me.zgs225.springinaction.springidol.Piano" />

	<bean id="audience"
		  class="me.zgs225.springinaction.springidol.Audience"/>
		  
	<!-- AOP configuration -->
	<aop:aspectj-autoproxy/>	
	
	<aop:config>
	<!-- 
		<aop:aspect ref="audience">
			<aop:pointcut id="performance"
						  expression="execution(* me.zgs225.springinaction.springidol.Performer.perform(..))"/>
			<aop:before method="takeSeats"            pointcut-ref="performance"/>
			<aop:before method="turnOffCellPhone"     pointcut-ref="performance"/>
			<aop:after-returning method="applaud"     pointcut-ref="performance"/>
			<aop:after-throwing method="demandRefund" pointcut-ref="performance"/>
		</aop:aspect>
		
		<aop:aspect>
			<aop:pointcut id="performance2"
						  expression="execution(* me.zgs225.springinaction.springidol.Performer.perform(..))"/>
			<aop:around method="watchPerformance()"   pointcut-ref="performance2"/>
		</aop:aspect>
	-->
		<aop:aspect ref="magician">
			<aop:pointcut id="thinking"
						  expression="execution(* me.zgs225.springinaction.springidol.Thinker.thinkOfSomething(String))
						              and args(thoughts)" />
			<aop:before method="interceptThoughts"
			            pointcut-ref="magician"
			            arg-names="thoughts"/>
		</aop:aspect>
		
		<aop:aspect>
			<aop:declare-parents types-matching="me.zgs225.springinaction.springidol.Performer+"
							     implement-interface="me.zgs225.springinaction.springidol.Contestant"
							     default-impl="me.zgs225.springinaction.springidol.GraciousContestant"/>
							     
		</aop:aspect>
	</aop:config>
	
	<!--           
    <bean id="hank"
     	  class="me.zgs225.springinaction.springidol.OneManBand">
   		<property name="instruments">
   			<map>
   				<entry key="GUITAR" value-ref="guitar" />
   				<entry key="CYMBAL" value-ref="cymbal" />
   				<entry key="HARMONICA" value-ref="harmonica" />
   			</map>
   		</property>
  	</bean>
  	 -->
</beans>



















